#!/bin/sh

# Colors
GREEN='\033[0;32m'
LIGHTGREEN='\033[1;32m'
NC='\033[1;37m'
LIGHTBLUE='\033[01;34m'
NC='\033[0m' # No Color

# In directory
PACKAGE_DIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
suggest_current(){
    case "$1" in
        "mysql.sock")
            current=$(netstat -ln | awk '/mysql\.sock/ { print $9 }')
        ;;
        "editor")
            current=$EDITOR
        ;;
        *)
            current=$(which $1)
        ;;
    esac
    if [ -n $current ]; then
        echo $current | pbcopy
        echo "${NC}Pressione ⌘ V para inserir  (${current})"
    fi
}

main() {

    echo "${LIGHTBLUE}================================================"
    echo " Mac CLI Instalador"
    echo "================================================${NC}\n"

    git clone https://github.com/guarinogabriel/mac-cli.git --depth 1 && cd mac-cli
    
    echo "${LIGHTGREEN}Por favor, insira o caminho para o mysql em sua máquina local:"
    echo "${NC}Pressione Enter sem nenhum valor para manter o padrão: /Applications/MAMP/Library/bin/mysql"
    suggest_current mysql
    read mysql_path
    if [ ! -z "$mysql_path" -a "$mysql_path" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#/Applications/MAMP/Library/bin/mysql#${mysql_path}#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    echo "${LIGHTGREEN}Coloque o nome do usuário do MYSQL:"
    echo "${NC}Pressione enter para manter o padrão: root"
    read mysql_user
    if [ ! -z "$mysql_user" -a "$mysql_user" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#mysql_user=\"root\"#mysql_user=\"${mysql_user}\"#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    echo "${LIGHTGREEN}Senha MYSQL:"
    echo "${NC}Pressione enter para manter o padrão: root"
    echo "${NC}digite none se nenhuma senha for usada"
    read mysql_password
    if [ ! -z "$mysql_password" -a "$mysql_password" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#mysql_password=\"root\"#mysql_password=\"${mysql_password}\"#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    echo "${LIGHTGREEN}Por favor, indique o caminho para o socket mysql na sua máquina local:"
    echo "${NC}Pressione enter para manter o padrão: /Applications/MAMP/tmp/mysql/mysql.sock"
    suggest_current mysql.sock
    read mysql_socket
    if [ ! -z "$mysql_socket" -a "$mysql_socket" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#/Applications/MAMP/tmp/mysql/mysql.sock#${mysql_socket}#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    echo "${LIGHTGREEN}caminho para o  mysqldump na sua maquina:"
    echo "${NC}Pressione enter para manter o padrão: /Applications/MAMP/Library/bin/mysqldump"
    suggest_current mysqldump
    read mysql_dump
    if [ ! -z "$mysql_dump" -a "$mysql_dump" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#/Applications/MAMP/Library/bin/mysqldump#${mysql_dump}#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    echo "${LIGHTGREEN}Coloque o caminho da pasta da sua DROPBOX:"
    echo "${NC}Pressione enter para manter o padrão: /Users/$(id -u -n)/Dropbox/"
    read dropbox_path
    if [ ! -z "$dropbox_path" -a "$dropbox_path" != " " ]; then
        LC_CTYPE=C sed -i'' -e "s#/Users/\$(id -u -n)/Dropbox/#${dropbox_path}#g" "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    printf "${LIGHTGREEN}"
    read -r -p "Você gostaria que o Mac CLI mostrasse os comandos que são executados em cada comando mac (Yes / No)" response
    case $response in
        [yY][eE][sS]|[yY])
            LC_CTYPE=C sed -i'' -e 's#echocommand="false"#echocommand="true"#g' "$PACKAGE_DIRECTORY/mac-cli/mac"
            ;;
        *)
            ;;
    esac
    printf "${NC}"

    echo "${LIGHTGREEN}Por favor, insira seu editor de texto favorito (digitando o comando que abre seu editor favorito, ou seja: nano): "
    echo "${NC}Pressione enter para manter o padrão: vi"
    suggest_current editor
    read pref_editor
    if [ ! -z "$pref_editor" -a "$pref_editor" != " " ]; then
        LC_CTYPE=C sed -i'' -e 's#pref_editor="vi"#pref_editor="${pref_Editor}"#g' "$PACKAGE_DIRECTORY/mac-cli/mac"
    fi

    if [ ! -d /usr/local/bin ]; then
            echo "bin Não Encontrado"
    	{
    		echo "Criando a pasta bin..."
    		mkdir -p /usr/local/bin
    	} || {
    		echo "erro na criação da pasta bin"
    		exit 1
    	}
    fi

    cp "$PACKAGE_DIRECTORY/mac-cli/mac" /usr/local/bin/mac
	cp -r "$PACKAGE_DIRECTORY/mac-cli/mac-cli/" /usr/local/bin/mac-cli
	chmod -R +x /usr/local/bin/mac-cli/*

    if [ ! -f /usr/local/bin/brew ]; then
        echo "Instalando homebrew..."
        echo "${GREEN}/usr/bin/ruby -e '\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)'\n${NC}"
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    if [ ! -f /usr/local/bin/git ]; then
        echo "Instalando Git..."
        echo "${GREEN}brew install git\n${NC}"
        brew install git
	fi

    if [ ! -f /usr/local/bin/pv ]; then
        echo "Instalando pv (Pipe Viewer)..."
        echo "${GREEN}brew install pv\n${NC}"
        brew install pv
	fi

    if ! which node > /dev/null; then
        echo "Instalando node..."
        echo "${GREEN}brew install node\n${NC}"
        brew install node
	fi

    if [ ! -f /usr/local/bin/python ]; then
        echo "Instalando Python..."
        echo "${GREEN}brew install python\n${NC}"
        brew install python
	fi

    if [ ! -f /usr/local/bin/fdupes ]; then
        echo "Instalando fdupes..."
        echo "${GREEN}brew install fdupes\n\n${NC}"
        brew install fdupes
    fi

    if [ ! -f /usr/local/bin/wget ]; then
        echo "Instalando wget..."
        printf "${GREEN}brew install wget\n${NC}"
        brew install wget
	fi

    if [ ! -f /usr/local/bin/composer.phar ] && [ ! -f /usr/local/bin/composer ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install composer (https://getcomposer.org/)? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando composer..."
                echo "${GREEN}brew install composer\n${NC}"
                brew install composer
                ;;
            *)
                ;;
        esac
        printf "${NC}"
    fi

    if [ ! -f /usr/local/bin/compass ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install Compass (http://compass-style.org/)? (Yes / No)" response
        case $response in
          [yY][eE][sS]|[yY])
            echo "Instalando Compass..."
            echo "${GREEN}sudo gem install -n /usr/local/bin compass\n${NC}"
            sudo gem install -n /usr/local/bin compass
          ;;
          *)
          ;;
        esac
        printf "${NC}"
    fi

    if [ ! -f /usr/local/bin/sass ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install SASS (http://sass-lang.com/)? (Yes / No)" response
        case $response in
          [yY][eE][sS]|[yY])
            echo "Instalando SCSS..."
            echo "${GREEN}gem install sass\n${NC}"
            gem install sass
          ;;
          *)
          ;;
        esac
        printf "${NC}"
    fi

    if [ ! -f /usr/local/bin/mycli ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install MySQL CLI to manage your databases (https://github.com/dbcli/mycli)? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando mycli (MySQL CLI - https://github.com/dbcli/mycli)..."
                echo "${GREEN}brew install mycli\n${NC}"
                brew install mycli
                ;;
            *)
                ;;
        esac
        printf "${NC}"
	fi

    if [ ! -f /usr/local/bin/glances ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install Glances to access advanced information about the system (https://github.com/nicolargo/glances)? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando Glances (https://github.com/nicolargo/glances)..."
                echo "${GREEN}pip install glances\n${NC}"
                pip install glances
                ;;
            *)
                ;;
        esac
        printf "${NC}"
	fi

    if [ ! -f /usr/local/bin/speedtest-cli ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install Fast CLI to run internet speed tests from your command line (https://github.com/sindresorhus/fast-cli)? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando Fast CLI (https://github.com/sindresorhus/fast-cli)..."
                echo "${GREEN}npm install --global fast-cli\n${NC}"
                npm install --global fast-cli
                ;;
            *)
                ;;
        esac
        printf "${NC}"
	fi

    if [ ! -f /usr/local/bin/imageOptim ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install ImageOptim to optimize images from the command line? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando ImageOptim..."
                echo "${GREEN}brew cask install --appdir="~/Applications" imageoptim --force\n${NC}"
                brew cask install --appdir="~/Applications" imageoptim --force

                echo "Instalando ImageOptim-CLI (https://github.com/JamieMason/ImageOptim-CLI)..."
                echo "${GREEN}npm install -g imageoptim-cli\n${NC}"
                npm install -g imageoptim-cli
                ;;
            *)
                ;;
        esac
        printf "${NC}"
	fi

    if [ ! -f /usr/local/bin/istats ]; then
        printf "${LIGHTGREEN}"
        read -r -p "Would you like to install iStats access information about your Mac temperature and fan speed? (Yes / No)" response
        case $response in
            [yY][eE][sS]|[yY])
                echo "Instalando iStats..."
                echo "${GREEN}sudo gem install iStats -n/usr/local/bin\n\n${NC}"
                sudo gem install iStats -n/usr/local/bin
                ;;
            *)
                ;;
        esac
        printf "${NC}"
    fi

    if ! brew list | grep -q bash-completion ; then

            echo "Instalando bash-completion\n"
            echo "${GREEN}brew install bash-completion\n\n${NC}"
            brew install bash-completion
            echo 'if [ -f $(brew --prefix)/etc/bash_completion ]; then source $(brew --prefix)/etc/bash_completion; fi' >> ~/.bashrc
            echo "Setting up Mac-CLI bash-completion\n"

        if [ -d /usr/local/etc/bash_completion.d/ ]; then
            cp /usr/local/bin/mac-cli/completion/bash_completion /usr/local/etc/bash_completion.d/mac
        fi

    else

        echo "Setting up Mac-CLI bash-completion\n"

        if [ -d $(brew --prefix)/etc/bash_completion.d/ ]; then
            cp /usr/local/bin/mac-cli/completion/bash_completion $(brew --prefix)/etc/bash_completion.d/mac
            echo 'if [ -f $(brew --prefix)/etc/bash_completion ]; then source $(brew --prefix)/etc/bash_completion; fi' >> ~/.bashrc
        fi

    fi

    #
    # Check if fish shell is installed and prompt user to copy fish_completion
    #
    if $(cat /etc/shells | grep -q fish) && [ -d ~/.config/fish ];
    then
	    printf "${LIGHTGREEN}"
	    read -r -p "Would you like to install fish shell suggestions/tab completion? (Yes / No) " response
	    case $response in
		    [yY][eE][sS]|[yY])
			    echo "Setting up Mac-CLI Fish completion"
			    if [ -d ~/.config/fish/completions ];then
				    cp /usr/local/bin/mac-cli/completion/fish_completion ~/.config/fish/completions/mac.fish
			    else
				    mkdir ~/.config/fish/completions && cp /usr/local/bin/mac-cli/completion/fish_completion ~/.config/fish/completions/mac.fish
			    fi
			    ;;
		    *)
			    ;;
	    esac
	    printf "${NC}"
    fi
}

main
